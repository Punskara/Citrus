#!/usr/bin/env php
<?php
chdir( __DIR__ );
include 'boot.php';
\core\Citrus\Citrus::getInstance()->bootCLI();

// referenced commands 
$commands = Array(
    "compile-less",
    "new-app",     
    "new-module",  
);

// command
$command = null;
if ( isset( $argv[1] ) ) {
    $command = $argv[1];
}
if ( $command ) {
    switch ( $command ) {
        case 'new-app':
            if ( isset( $argv[2] ) ) {
                try {
                    $name = $argv[2];
                    if ( preg_match( "/^[a-z]$/", $name ) ) {
                        echo "[ERROR] App name must be alphabetic, lower case only.\n";
                        return;
                    }
                    $installer = new \core\Citrus\sys\Installer();
                    $installer->generateApp( $argv[2] );
                    echo "[OK] App '$name' created.\n";
                } catch ( Exception $e ) {
                    echo $e->getMessage() . "\n";
                }
            } else echo "[INFO] syntax: new-app appname.\n";
            break;

        case 'new-module':
            if ( isset( $argv[2] ) && isset( $argv[3] ) ) {
                try {
                    $mod_name = $argv[2];
                    $app_name = $argv[3];
                    $installer = new \core\Citrus\sys\Installer();
                    if ( !$installer->appExists( $app_name ) ) {
                        echo "[ERROR] App '$app_name' doesn't exist. Try new-app first.\n";
                        return;
                    }
                    if ( !preg_match( "/^[a-z]+$/", $mod_name ) ) {
                        echo "[ERROR] Module name must be alphabetic, lower case only.\n";
                        return;
                    }
                    $installer->generateModule( $mod_name, $app_name );
                    echo "[OK] Module '$mod_name' created in app '$app_name'.\n";
                } catch ( Exception $e ) {
                    echo $e->getMessage() . "\n";
                }
            } else echo "[INFO] syntax: new-module modulename appname.\n";
            break;

        case 'compile-less':
            require 'vendor/autoload.php';
            if ( isset( $argv[2] ) && isset( $argv[3] ) ) {
                try {
                    lessc::ccompile( $argv[2], $argv[3] );
                    echo "Minified!\n";
                } catch ( Exception $ex ) {
                    exit( "Error:\n" . $ex->getMessage() );
                }
            } else {
                echo "syntax: compile-less input output\n";
            }
            break;

        default:
            break;
    }
} else {
    $cmd_list = implode( ', ', $commands );
    echo "Commands: $cmd_list\n";
}

